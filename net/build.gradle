apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.androidVersions.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.androidVersions.minSdkVersion
        targetSdkVersion rootProject.ext.androidVersions.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled true

            FileCollection proGuardFileCollection = files { file('./proguard').listFiles() }
            for (File file : proGuardFileCollection) {
                proguardFile(file)
            }
            proguardFile getDefaultProguardFile('proguard-android.txt')

            logger.info("Used a total of " + getProguardFiles().size() + " Proguard files")
            for (final File file : getProguardFiles()) {
                logger.info('Used Proguard File: ' + file.toURI())
            }
        }
        debug {
            minifyEnabled false
            debuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {

    implementation rootProject.ext.dependencies.rxJava2

    api rootProject.ext.dependencies.gson
    api rootProject.ext.dependencies.okHttp3
    api rootProject.ext.dependencies.okHttpLogging
    api(rootProject.ext.dependencies.retrofit2) {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    api(rootProject.ext.dependencies.retrofit2GsonConverter) {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    api(rootProject.ext.dependencies.retrofit2RxJava2) {
        exclude group: 'io.reactivex.rxjava2', module: 'rxjava'
    }

    testImplementation rootProject.ext.testDependencies.jUnit

}
